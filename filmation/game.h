#pragma once

#include <vector>
#include <SDL.h>
#include <SDL_image.h>
#include "AssetsManager.h"
#include "InputHandler.h"

#define ULTIMO		-1

class Game {
public:
	static Game* Instance()
	{
		if (s_pInstance == 0)
		{
			s_pInstance = new Game();
			return s_pInstance;
		}
		return s_pInstance;
	}

	SDL_Renderer* getRenderer() const { return m_pRenderer; }

	~Game();

	bool init(const char* title, int xpos, int ypos, int width, int height, bool fullscreen);
	void render();
	void update();
	void handleEvents();
	//void clean();
	void quit();

	bool running() { return m_bRunning; }

	int getGameWidth() const { return m_gameWidth; }
	int getGameHeight() const { return m_gameHeight; }

	//0,1: source x,y ; 2,3: destination x,y ; 4,5: width and height
	int   mapa_zona_1[131][6] = { 0,  0, 144, 36, 32,15, /* suelo rojo */
				 0,  0, 112, 52, 32,15,
				 0,  0, 144, 52, 32,15,
				 0,  0, 176, 52, 32,15,
				 0,  0,  80, 68, 32,15,
				 0,  0, 112, 68, 32,15,
				 0,  0, 144, 68, 32,15,
				 0,  0, 176, 68, 32,15,
				 0,  0, 208, 68, 32,15,
				 0,  0,  48, 84, 32,15,
				 0,  0,  80, 84, 32,15,
				 0,  0, 112, 84, 32,15,
				 0,  0, 144, 84, 32,15,
				 0,  0, 176, 84, 32,15,
				 0,  0, 208, 84, 32,15,
				 0,  0, 240, 84, 32,15,
				 0,  0,  16,100, 32,15,
				 0,  0,  48,100, 32,15,
				 0,  0,  80,100, 32,15,
				 0,  0, 112,100, 32,15,
				 0,  0, 144,100, 32,15,
				 0,  0, 176,100, 32,15,
				 0,  0, 208,100, 32,15,
				 0,  0, 240,100, 32,15,
				 0,  0, 272,100, 32,15,
				 0,  0,  16,116, 32,15,
				 0,  0,  48,116, 32,15,
				 0,  0,  80,116, 32,15,
				 0,  0, 112,116, 32,15,
				 0,  0, 144,116, 32,15,
				 0,  0, 176,116, 32,15,
				 0,  0, 208,116, 32,15,
				 0,  0, 240,116, 32,15,
				 0,  0, 272,116, 32,15,
				 0,  0,  48,132, 32,15,
				 0,  0,  80,132, 32,15,
				 0,  0, 112,132, 32,15,
				 0,  0, 144,132, 32,15,
				 0,  0, 176,132, 32,15,
				 0,  0, 208,132, 32,15,
				 0,  0, 240,132, 32,15,
				 0,  0,  80,148, 32,15,
				 0,  0, 112,148, 32,15,
				 0,  0, 144,148, 32,15,
				 0,  0, 176,148, 32,15,
				 0,  0, 208,148, 32,15,
				 0,  0, 112,164, 32,15,
				 0,  0, 144,164, 32,15,
				 0,  0, 176,164, 32,15,
				 0,  0, 144,180, 32,15,

				32,  0, 128, 44, 32,15, /* suelo amarillo */
				32,  0, 160, 44, 32,15,
				32,  0,  96, 60, 32,15,
				32,  0, 128, 60, 32,15,
				32,  0, 160, 60, 32,15,
				32,  0, 192, 60, 32,15,
				32,  0,  64, 76, 32,15,
				32,  0,  96, 76, 32,15,
							32,  0, 128, 76, 32,15,
				32,  0, 160, 76, 32,15,
				32,  0, 192, 76, 32,15,
				32,  0, 224, 76, 32,15,
				32,  0,  32, 92, 32,15,
				32,  0,  64, 92, 32,15,
				32,  0,  96, 92, 32,15,
				32,  0, 128, 92, 32,15,
				32,  0, 160, 92, 32,15,
				32,  0, 192, 92, 32,15,
				32,  0, 224, 92, 32,15,
				32,  0, 256, 92, 32,15,
				32,  0,   0,108, 32,15,
				32,  0,  32,108, 32,15,
				32,  0,  64,108, 32,15,
				32,  0,  96,108, 32,15,
				32,  0, 128,108, 32,15,
				32,  0, 160,108, 32,15,
				32,  0, 192,108, 32,15,
				32,  0, 224,108, 32,15,
				32,  0, 256,108, 32,15,
				32,  0, 288,108, 32,15,
				32,  0,  32,124, 32,15,
				32,  0,  64,124, 32,15,
				32,  0,  96,124, 32,15,
				32,  0, 128,124, 32,15,
				32,  0, 160,124, 32,15,
				32,  0, 192,124, 32,15,
				32,  0, 224,124, 32,15,
				32,  0, 256,124, 32,15,
				32,  0,  64,140, 32,15,
				32,  0,  96,140, 32,15,
				32,  0, 128,140, 32,15,
				32,  0, 160,140, 32,15,
				32,  0, 192,140, 32,15,
				32,  0, 224,140, 32,15,
				32,  0,  96,156, 32,15,
				32,  0, 128,156, 32,15,
				32,  0, 160,156, 32,15,
				32,  0, 192,156, 32,15,
				32,  0, 128,172, 32,15,
				32,  0, 160,172, 32,15,

				 0, 15,   0,116, 16,12, /* borde suelo izq */
				 0, 15,  16,124, 16,12,
				 0, 15,  32,132, 16,12,
				 0, 15,  48,140, 16,12,
				 0, 15,  64,148, 16,12,
							 0, 15,  80,156, 16,12,
				 0, 15,  96,164, 16,12,
				 0, 15, 112,172, 16,12,
				 0, 15, 128,180, 16,12,
				 0, 15, 144,188, 16,12,

				16, 15, 304,116, 16,12, /* borde suelo der */
				16, 15, 288,124, 16,12,
				16, 15, 272,132, 16,12,
							16, 15, 256,140, 16,12,
				16, 15, 240,148, 16,12,
				16, 15, 224,156, 16,12,
				16, 15, 208,164, 16,12,
				16, 15, 192,172, 16,12,
				16, 15, 176,180, 16,12,
				16, 15, 160,188, 16,12,

			   288,  0, 128,-28, 32,79, /* pared izq */
			   288,  0,  96,-12, 32,79,
			   288,  0,  64,  4, 32,79,
			   288,  0,  32, 20, 32,79,
			   288,  0,   0, 36, 32,79,

			   256,  0, 160,-28, 32,79, /* pared der */
			   256,  0, 192,-12, 32,79,
			   256,  0, 224,  4, 32,79,
			   256,  0, 256, 20, 32,79,
			   256,  0, 288, 36, 32,79,
			   ULTIMO
	};

	int   objetos_zona_1[6];	  /* array para las coordenadas de los cubos */

	//0,1: source x,y
	//2,3,4: destination x,y,z
	//5,6: width, height
	//7: movement over the x axis.
	int   xyz_objetos_zona_1[5][8] = { 64,0,  0, 0, 0, 32,30, +2, /* cubo rojo   */
					   96,0,  8, 0,24, 32,30, +2, /* cubo verde  */
					  128,0, 16, 0,48, 32,30, -2, /* cubo azul   */
					  160,0, 24, 0,72, 32,30, +2, /* cubo marr¢n */
					  ULTIMO
	};

	int bloq, cubo, x, y, z;

private:
	Game();
	static Game* s_pInstance;
	SDL_Window* m_pWindow;
	SDL_Renderer* m_pRenderer;

	bool m_bRunning;
	int m_gameWidth;
	int m_gameHeight;
};
